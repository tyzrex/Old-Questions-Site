{
    "subject": "Design and analysis of algorithms",
    "questions": [
        {
            "Chapter": "\n                                Unit: 1 Foundation of Algorithm Analysis\n                            ",
            "Question": [
                "1.\u00a0\u00a0Explain worst case, best case and average case of algorithm analysis with\r\nan example. [8]\n",
                "1.\u00a0\u00a0Write down the formal definition of big-oh, big-omega and big-theta\r\nnotation with examples.\n",
                "1. What are the elementary properties of algorithm ? Explain. Why do you need analysis of algorithm? Discuss about the RAM model for analysis of algorithm with suitable example. (2+2+6)\n",
                "1.\u00a0 What do you mean by complexity of an algorithm? Explain about the asymptotic notations used to describe the time/space complexity of any algorithm with their geometrical interpretation and example.\u00a0 \u00a0 (1+9)\n",
                "1.\u00a0\u00a0Use RAM model to estimate the\r\nbig-oh of the running time for following code segment.\nfor(i=0;i<n;i++){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 small pos = i;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 smallest\r\n= Array[small pos];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for(j=i+1;\r\nj<=n; j++){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if(Array[j]<smallest){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 small\r\npos = j;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 smallest=Array[small\r\npos];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Array[small\r\npos]=Array[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Array[i]\r\n= smallest;\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "1.\u00a0\u00a0Explain the term Big-oh, Big-omega and Big-theta. Show\r\nthat a function f=3n2+4n+7 \u00a0is big theta of n2. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "1.\u00a0 What do you mean by time and space complexity? Explain Big Oh, Big Omega and Big Theta.\n",
                "1.\u00a0\u00a0Why do you need the algorithm analysis? Explain the\r\nbest, worst and average case complexities with suitable example. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \u00a0\u00a0\n",
                "1.\u00a0\u00a0What do you mean by\r\ncomplexity of an algorithm? Explain RAM model for the analysis of algorithm\r\nwith example. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "1.\u00a0\u00a0Explain bog-oh,\r\nbig-omega and big-theta notations for computing analysis of algorithm with\r\nexample.\n",
                "1.\u00a0\u00a0What do you mean by\r\ncomplexity of an algorithm? Algorithm A has complexity O(2logn) and\r\nalgorithm B has time complexity O(log2n) . Elaborate, how can you explain this\r\nstatement.\u00a0\u00a0\n",
                "2.\u00a0\u00a0What\r\nis recurrence relation? Find big-O of following recurrence using recurrence\r\ntree method.\u00a0 \u00a0 \u00a0\u00a0[2+6]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "2. Explain about the divide and\u00a0 conquer paradigm for a algorithm design with suitable example. Write the Quick sort algorithm using randomized approach and explain its time complexity. (4+6)\n",
                "2.\u00a0 Define recurrence relation. Explain the recursion tree method for solving the recurrence relation with example.\n",
                "2.\u00a0\u00a0What is recurrence tree\r\nmethod? Determine a good asymptotic upper bound of following relation using\r\nrecurrence tree method.\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "2.\u00a0\u00a0Define the Master\r\ntheorem for solving the recurrence relation and solve the following recurrence\r\nrelation using this method.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "2.\u00a0\u00a0What do you mean by recurrence\r\nrelation? Solve the following recurrence relation using master method. \u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "2.\u00a0\u00a0Explain the big Oh of the\r\nfollowing recurrence relations using the iterative expansion method. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "2.\u00a0\u00a0Explain the master method for solving the recurrence\r\nrelations. Solve the following recurrence relations using this method. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "2.\u00a0\u00a0What do you mean by a recurrence relation? Solve the\r\nfollowing recurrence relation using iterative expansion method \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "2.\u00a0\u00a0What do you mean by recurrence\r\nrelation? Estimate the running time of algorithm given by following recurrence\r\nrelations using master method.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "2.\u00a0\u00a0What is recurrence relation? Find big-O of following recurrence using\r\nrecurrence tree method.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0\n",
                "3.\u00a0\u00a0Make\r\na tight big-O analysis of following code.\nvoid\r\nmain() \n{\n\u00a0\u00a0 int m, n, i, j, a[], b[], c[];\n\u00a0\u00a0 printf(\u201cEnter value of m and n\u201d);\n\u00a0\u00a0 scanf(\u201c%d%d\u201d,&m,&n);\n\u00a0\u00a0 for(i=0;i<n;i++)\n\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0 a[i]=i;\n\u00a0\u00a0\u00a0\u00a0\u00a0 b[i]=i*i;\n\u00a0\u00a0\u00a0\u00a0\u00a0 c[i]=-i;\n\u00a0\u00a0 }\n\u00a0\u00a0 for(j=0;j<m;j++)\n\u00a0\u00a0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0 printf(\u201c%d\\t%d\\t%d\\n\u201d,a(j), b(j), c(j);\n\u00a0\u00a0 }\n}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0[8]\n\u00a0\n",
                "3. Explain in brief about the Dynamic Programming Approach for algorithm design. How it differs with recursion? Explain the algorithm for solving the 0/1 knapsack problem using the dynamic programming approach and explain its complexity. (2+2+6)\n",
                "3.\u00a0\u00a0Make\r\na tight big-O analysis of following code.\nvoid\r\nmain() \n{\n\u00a0\u00a0 int m, n, i, j, a[], b[], c[];\n\u00a0\u00a0 printf(\u201cEnter value of m and n\u201d);\n\u00a0\u00a0 scanf(\u201c%d%d\u201d,&m,&n);\n\u00a0\u00a0 for(i=1;i<=m;i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0 a[i]=i*i;\n\u00a0\u00a0 for(j=1;j<=n;j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0 b[j]=-j;\n\u00a0\u00a0 for(i=1;i<=m;i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0 printf(\u201c%d\u201d, a[i]);\n\u00a0\u00a0 for(j=1;j<=n;j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0 printf(\u201c%d\u201d, b[j]);\n}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "5.\u00a0 Solve the following recurrence relations using master method.\u00a0 \u00a0 (2.5+2.5)\u00a0 \u00a0 \u00a0 \u00a0 a. T(n)=7T(n/2)+n2\u00a0 \u00a0 \u00a0 \u00a0 b. T(n)=4T(n/4)+kn\n",
                "4. Explain the recursion tree method for solving the recurrence relation. Solve following recurrence relation using using this method. T(n) = 2T(n/2)+1 for n>1, T(n) = 1 for n = 1 (2+3)\n",
                "5. Write an algorithm to find the maximum element of an array and analyze its time complexity.(5)\n",
                "6. Write the algorithm for bubble sort and explain its time complexity.(5)\n",
                "7. What do you mean by optimization problem? Explain the greedy strategy for algorithm design to solve optimization problems.(1+4)\n",
                "10.\u00a0\u00a0What is BST? Write the\r\nalgorithm of insertion and deletion operation of BST\n",
                "10.\u00a0\u00a0Explain worst case, best\r\ncase and average case of algorithm analysis with an example.\u00a0\n",
                "8. Explain the algorithm and its complexity for solving job sequencing with deadline problem using greedy strategy.(5)\n",
                "9. What do you mean by memoization strategy? Compare memoization with dynamic programming.(2+3)\n",
                "10. Explain the concept of backtracking. How it differ with recursion?(2+3)\n",
                "11. Explain in brief about the complexity classes P,NP and NP Complete.(5)\n",
                "12. Write short notes on:(2*2.5)a. NP Hard Problems and NP Completenessb. Problem Reduction\n"
            ],
            "Asked": [
                "\nasked in 2067\n",
                "\nasked in 2068\n",
                "\nasked in 2078(New Course)\n",
                "\n\n                                        show solution\n                                    \nasked in 2076 (new)\n",
                "\nasked in 2069\n",
                "\nasked in 2070\n",
                "\nasked in 2076\n",
                "\nasked in 2071\n",
                "\nasked in 2075\n",
                "\nasked in 2073\n",
                "\nasked in 2074\n",
                "\nasked in 2067\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2076\n",
                "\nasked in 2075\n",
                "\nasked in 2074\n",
                "\nasked in 2073\n",
                "\nasked in 2072\n",
                "\nasked in 2071\n",
                "\nasked in 2070\n",
                "\nasked in 2069\n",
                "\nasked in 2068\n",
                "\nasked in 2067\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2068\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2073\n",
                "\nasked in 2075\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2078(New Course)\n",
                "\nasked in 2078(New Course)\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 2 Iterative Algorithms\n                            ",
            "Question": [
                "1.\u00a0\u00a0Describe the best case and\r\nworst case complexity of an algorithm. Write algorithm for insertion sort and\r\nestimate the best and worst case complexity. \u00a0\n",
                "4.\u00a0 Write the algorithm for Selection Sort and explain its time and space complexity.\u00a0 \u00a0 (5)\n"
            ],
            "Asked": [
                "\nasked in 2072\n",
                "\nasked in 2076 (new)\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 3 Divide and Conquer Algorithms\n                            ",
            "Question": [
                "2.\u00a0 Explain about divide and conquer paradigm for algorithm design with suitable example. Write the Quick sort algorithm using randomized approach and explain its time complexity.\u00a0 \u00a0 (4+6)\n",
                "3.\u00a0\u00a0Write an algorithm for\r\nquick-sort and trace out the algorithm for the following array\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A[\r\n] = { 16,7,15,14,18,25,55,32 }. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "3.\u00a0\u00a0Explain the divide and conquer approach for algorithm\r\ndesign. Design the binary search algorithm and analyze it\u2019s time complexity. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "3.\u00a0\u00a0What is the worst-case of\r\nquick sort? Show the how quick sort can be made to run in optimal time in the\r\nworst case. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "3.\u00a0\u00a0What is quick sort? Trace the following data using quick sort algorithm.\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A[]={99, 50, 60, 8, 5, 6, 20, 25, 40}\n",
                "3.\u00a0\u00a0Write the algorithm\r\nfor Merge sort and find its time complexity. Compare merge sort with quick sort\r\nin terms of time and space complexity.\n",
                "3.\u00a0 What is heap sort? Trace the\r\nfollowing data using heap sort algorithm.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\nX[]={10, 8, 12, 70, 20, 5, 30}\n",
                "4.\u00a0\u00a0What\r\nis order statistics? How can you devise an algorithm that guarantee the section\r\nof ith order statistics in linear time? Write the algorithm of it\r\nand analyze it. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1+3+4]\n",
                "4.\u00a0\u00a0What is linear data structure? Write down the algorithm of heap sort and\r\nfind its complexity analysis.\n",
                "4.\u00a0\u00a0Define order statistics. Write an algorithm that is able to select ith\r\nlargest element from an un-ordered list in linear time and analyzer for its\r\ncomplexity.\n",
                "4.\u00a0\u00a0How can you solve the selection problem in linear\r\ntime? Write the algorithm and analyze for its time complexity. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "4.\u00a0\u00a0Explain the merge-sort algorithm with example and\r\nanalyze its time complexity.\u00a0\n",
                "4.\u00a0\u00a0Trace the heap-sort\r\nalgorithm for the following data: {16, 41, 18, 99, 74, 20, 17, 25, 10}.\u00a0 \u00a0\n",
                "4.\u00a0\u00a0How can you solve the\r\nselection problem in linear time in worst case? Explain the algorithm.\n",
                "5.\u00a0\u00a0What is divide and conquer technique? Using this technique. Write an\r\nalgorithm of quick sort then analyze it.\u00a0\u00a0\u00a0\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "5.\u00a0\u00a0What\r\nis the main idea of randomized algorithm? Write an algorithm quick sort and\r\nanalyze it.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n\u00a0[2+6]\n",
                "7.\u00a0 Trace the heap-sort algorithm for the following data: {12, 45, 62, 50, 85, 15, 28}.\u00a0 \u00a0 (5)\n"
            ],
            "Asked": [
                "\n\n                                        show solution\n                                    \nasked in 2076 (new)\n",
                "\nasked in 2070\n",
                "\nasked in 2071\n",
                "\nasked in 2072\n",
                "\nasked in 2073\n",
                "\nasked in 2074\n",
                "\nasked in 2075\n",
                "\nasked in 2067\n",
                "\nasked in 2068\n",
                "\nasked in 2069\n",
                "\nasked in 2070\n",
                "\nasked in 2071\n",
                "\nasked in 2072\n",
                "\nasked in 2074\n",
                "\nasked in 2068\n",
                "\nasked in 2067\n",
                "\nasked in 2076 (new)\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 4 Greedy Algorithms\n                            ",
            "Question": [
                "3.\u00a0 Explain the algorithm for binary search with an example and also discuss its time complexity.\n",
                "3.\u00a0\u00a0Explain the quick sort algorithm with its complexity analysis. How\r\nrandomized quick sort works efficiently even for worst case.\n",
                "4.\u00a0\u00a0What is Huffman code? Write\r\ndown Hoffman algorithm and find out its complexity.[\n",
                "4.\u00a0\u00a0What is Greedy\r\nparadigm? Write down the Greedy job sequencing algorithm.\n",
                "4.\u00a0 Compare the algorithms for quick sort, merge sort and heap sort in terms the time and space complexity.\n",
                "5.\u00a0\u00a0Sketch the Prim\u2019s algorithm for computing MST of a graph and analyze its\r\ncomplexity. Also trace the algorithm for the following graph.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n",
                "5.\u00a0\u00a0Discuss the fractional\r\nknapsack problem and how this problem can be solved? Explain the algorithm.\n",
                "5.\u00a0\u00a0What is prefix code? You have given a message text\r\nhaving seven distinct characters\u00a0\u00a0{p, q, r, s, t, u, v} with frequency {40, 20,\r\n15, 12, 8, 3, 2}. Trace the Huffman algorithm to build the tree and obtain the\r\noptimum prefix codes for each characters. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n",
                "5.\u00a0\u00a0What do you mean by a prefix code? How Huffman\r\nalgorithm generates prefix codes? Explain with an example.\n",
                "5.\u00a0 Discuss how knapsack problem can be solved in greedy approach. Explain the algorithm and complexity.\n",
                "5.\u00a0\u00a0What is prefix code? How\r\nHuffman algorithm generates optimal prefix codes? Explain with suitable\r\nexample.\u00a0\n",
                "6.\u00a0\u00a0Explain the Kruskal\u2019s\r\nalgorithm for computing spanning tree of weighted connected graph with an\r\nexample of seven nodes graph.\n",
                "6.\u00a0 Describe prim's algorithm for finding the minimum spanning tree of a graph. Also trace the algorithm for a weighted connected graph.\n",
                "6.\u00a0\u00a0Explain Prim\u2019s algorithm for computing the MST of a\r\ngiven graph and analyze it. Also verify the correctness of this algorithm. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "6.\u00a0\u00a0Give the job sequencing algorithm\r\nwith deadlines. You have given 5 jobs with profit pi and deadline di as\njob i = { 1, 2, 3,\r\n4, 5}\npi = {20, 10, 5,\r\n15, 1}\ndi = { 2, 1, 3, 2,\r\n3}\n\u00a0\u00a0\u00a0\u00a0\u00a0 Find the optimal job lists that can be\r\nexecuted in sequence with in their deadlines so as to maximize the profits.\n",
                "6.\u00a0\u00a0Define greedy paradigm. How can you define Huffman algorithm is greedy\r\nalgorithm? Explain.\n",
                "6.\u00a0 Explain the greedy algorithm for fractional knapsack problem with its time complexity.\u00a0 \u00a0 (5)\n",
                "7.\u00a0\u00a0What\r\nis minimum spanning tree? Write the execution trace of the following graph to\r\nconstruct minimum spanning tree by prims algorithm. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "7.\u00a0\u00a0Describe the prism\u2019s\r\nalgorithm for finding the maximum spanning tree of a graph. Also trace the\r\nalgorithm for a weighted connected graph with at least 7 vertices.\n",
                "7.\u00a0\u00a0Write the Dijkstra\u2019s\r\nalgorithm for single source shortest path in a weighted connected graph. Find\r\nthe shortest path from the node S to other nodes in the following graph.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0\n",
                "7.\u00a0\u00a0Explain the algorithm to find the all pair shortest\r\npath of a weighted connected graph. Trace the algorithm for the following\r\ngraph.\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "7.\u00a0\u00a0What is shortest path problem? Explain Dijkstra\u2019s algorithm for shortest\r\npath problem.\u00a0\n",
                "9.\u00a0\u00a0What is short path problem?\r\nExplain Dijkstra\u2019s algorithm to compute shortest path. \u00a0\n",
                "10.\u00a0\u00a0Explain Dijkstra\u2019s algorithm for computing the single\r\nsource shortest path in a graph with suitable example. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "10.\u00a0 Explain the Prim's algorithm for MST problem and analyze its time complexity.\u00a0 \u00a0 (5)\n"
            ],
            "Asked": [
                "\nasked in 2076\n",
                "\nasked in 2069\n",
                "\nasked in 2075\n",
                "\nasked in 2073\n",
                "\nasked in 2076\n",
                "\nasked in 2069\n",
                "\nasked in 2074\n",
                "\nasked in 2070\n",
                "\nasked in 2071\n",
                "\nasked in 2076\n",
                "\nasked in 2072\n",
                "\nasked in 2075\n",
                "\nasked in 2076\n",
                "\nasked in 2070\n",
                "\nasked in 2069\n",
                "\nasked in 2067\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2067\n",
                "\nasked in 2074\n",
                "\nasked in 2072\n",
                "\nasked in 2071\n",
                "\nasked in 2068\n",
                "\nasked in 2075\n",
                "\nasked in 2070\n",
                "\nasked in 2076 (new)\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 5 Dynamic Programming\n                            ",
            "Question": [
                "5.\u00a0\u00a0Write algorithm to\r\ncompute Longest Common Subsequence of given two sequences. Compute the LCS of\r\n\u201cCOMPANY\u201d and \u201cCOLONY\u201d.\u00a0\n",
                "5.\u00a0\u00a0What is dynamic programming?\r\nFind the longest common subsequence between \u201cXYYXXY\u201d and \u201cXXYXXYY\u201d. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "6.\u00a0\u00a0What are the advantages of dynamic programming? Find Longest Common\r\nSubsequence (LCS) between \u201cabbaab\u201d and \u201caabaabb\u201d. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "6.\u00a0\u00a0Discuss the 0/1 knapsack problem and how this problem\r\ncan be solved? Explain the algorithm.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "6.\u00a0\u00a0What do you mean by dynamic\r\nprogramming approach for design of algorithm? Write the algorithm for matrix\r\nchain multiplication and estimate its time complexity. \u00a0\n",
                "6.\u00a0\u00a0What is Floyd\u2019s\r\nalgorithm? Write the details of Floyd\u2019s algorithm to find shortest path in a\r\ngraph.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "6.\u00a0\u00a0What do you mean by\r\ndynamic programming approach for algorithm design? Explain the algorithm to\r\nsolve the longest common subsequences and analyze its complexity.\u00a0\u00a0\n",
                "7.\u00a0\u00a0Explain and analyze the Floyd\u2019s warshall algorithm for all pair shortest\r\npath problem. Trace the algorithm for the following graph.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "7.\u00a0\u00a0Distinguish the main idea for divide and conquer\r\napproach with dynamic programming approach. Find the longest common subsequence\r\nbetween two sequences <A,B,C,B,D,A,B> and <B,D,C,A,B,A>.\n",
                "7.\u00a0 Trace the algorithm for matrix chain multiplication for the given chain ABCD with size array {5, 2, 3, 5, 4}.\n",
                "8.\u00a0\u00a0Write an algorithm for depth first search. Use depth\r\nfirst search to find a spanning tree of the following graph.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0\n",
                "8.\u00a0\u00a0Write an algorithm to\r\ncompute the LCS of given two sequences. Trace the running of the algorithm to\r\nfind the LCS of the sequences \u201cXMJYAUZ\u201d and \u201cMZJAWXU\u201d.\u00a0\u00a0\n",
                "8.\u00a0\u00a0Write algorithm for\r\nsingle source shortest path in a DAG. Trace the algorithm for finding the\r\nshortest path from a source vertex in the following graph.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "9.\u00a0\u00a0What is directed\r\nacyclic graph? How to find the shortest path from a vertex of directed acyclic\r\ngraph?\n",
                "8.\u00a0 What do you mean by Dynamic Programming Strategy? Explain the elements of DP.\u00a0 \u00a0 (2+3)\n",
                "10.\u00a0\u00a0What is the concept of dynamic\r\nprogramming? Find the longest common subsequence (LCS) between \u201cXMJYAUZ\u201d and\r\n\u201cMZJAWXU\u201d. [2+6]\n"
            ],
            "Asked": [
                "\nasked in 2073\n",
                "\nasked in 2075\n",
                "\nasked in 2068\n",
                "\nasked in 2071\n",
                "\nasked in 2072\n",
                "\nasked in 2073\n",
                "\nasked in 2074\n",
                "\nasked in 2069\n",
                "\nasked in 2070\n",
                "\nasked in 2076\n",
                "\nasked in 2071\n",
                "\nasked in 2072\n",
                "\nasked in 2074\n",
                "\nasked in 2073\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2067\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 6 Backtracking\n                            ",
            "Question": [
                "3.\u00a0 Explain in brief about the Backtracking approach for algorithm design. How it differs with recursion? Explain the N-Queen Problem and its algorithm using backtracking and analyze its time complexity.\u00a0 \u00a0 (2+2+6)\n",
                "12.\u00a0 Write short notes on:\u00a0 \u00a0 \u00a0 \u00a0 (2x2.5)\u00a0 \u00a0 \u00a0 \u00a0 a. Backtracking Strategy\u00a0 \u00a0 \u00a0 \u00a0 b. Tractable and Intractable problems\n"
            ],
            "Asked": [
                "\nasked in 2076 (new)\n",
                "\nasked in 2076 (new)\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 7 Number Theoretic Algorithms\n                            ",
            "Question": [],
            "Asked": []
        },
        {
            "Chapter": "\n                                Unit: 8 NP Completeness\n                            ",
            "Question": [
                "7.\u00a0\u00a0What is left turn and right\r\nturn? How to detect the intersection of two line segment? Explain with example.\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "7.\u00a0\u00a0What is convex hull?\r\nDescribe the Graham\u2019s scan algorithm to compute convex hull.\n",
                "8.\u00a0\u00a0What is left turn and right turn? Give an algorithm for finding two\r\nlines segments intersect or not by using left turn and right turn. Does this\r\nalgorithm works for all cases? Justify with example.\n",
                "8.\u00a0 Define the convex hull in 2D. Write the Graham's scan algorithm and discuss its correctness and analyze its time complexity.\n",
                "8.\u00a0\u00a0What types of problems are\r\ncalled class-P, class-NP and NP-completeness? Explain with examples. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "8.\u00a0\u00a0What do you mean by left turn and right turn for given three points in\r\n2D? Explain the method for computing the intersection of two line segment\r\nefficiently.\n",
                "8.\u00a0\u00a0Define convex hull in 2D. Explain the gram\u2019s scan\r\nalgorithm for computing convex hull and analyze it. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "8.\u00a0\u00a0Describe the term\r\nClass-P, Class-NP and NP-completeness.\u00a0 \u00a0\n",
                "9.\u00a0\u00a0Define the terms \u201cClass P\u201d, \u201cClass NP\u201d and \u201cNP-completeness\u201d.\u00a0\n",
                "9.\u00a0 Define the term left turn and right turn. Explain, how can you detect the intersection of two given line segments efficiently.\n",
                "9.\u00a0\u00a0Define the convex hull\r\nin 2D. Write the Grahm\u2019s scan algorithm and its correctness for computing the\r\nconvex hull of points in 2D and analyze its time complexity. \u00a0 \u00a0\n",
                "9.\u00a0 \u00a0Define the term diagonal,\r\near and mouth of a simple polygon. How can you determine the intersection of\r\ntwo line segment efficiently? Explain in detail.\n",
                "9.\u00a0\u00a0\u00a0Define\r\nthe convex hull in 2D. Write the Grahm\u2019s scan algorithm for computing the\r\nconvex hull of points in 2D and analyze its time complexity.\u00a0\n",
                "9.\u00a0\u00a0Explain about the complexity classes P, NP and NP\r\ncomplete with suitable examples.\u00a0\n",
                "9.\u00a0\u00a0Explain about Class P, Class NP and NP-complete with suitable examples.\n",
                "9.\u00a0\u00a0Define the terms \u201cClass P\u201d, \u201cClass NP\u201d and \u201cNP-completeness\u201d. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "8.\u00a0\u00a0Explain Graham\u2019s scan algorithm to compute convex hull.\n",
                "10.\u00a0\u00a0What do you mean by approximation algorithm? Write the\r\nalgorithm for approximate the vertex cover of a connected graph with example.\n",
                "10.\u00a0\u00a0Discuss NP completeness.\r\nWhat is the role of approximation algorithms? Explain the algorithm for vertex\r\ncover of a graph with running example.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\n",
                "10.\u00a0Explain the Gram\u2019s scan algorithm with example to compute the convex\r\nhull of the set of points in 2D.\u00a0 \u00a0 \u00a0 \u00a0\n",
                "10.\u00a0\u00a0Why approximation\r\nalgorithms are used? Write the algorithm for approximate the vertex cover of a\r\nconnected graph with example. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "10.\u00a0\u00a0What is the concept of randomized algorithm? Write an algorithm of\r\napprox..-vertex-cover problem and analyze it.\n",
                "10.\u00a0 What is the application of approximate algorithms? Write the algorithm for approximate the vertex cover of a connected graph with example.\n",
                "9.\u00a0 Explain the approximation algorithm for solving vertex cover with suitable example.\u00a0 \u00a0 (5)\n",
                "11.\u00a0 Explain in brief about the classes P, NP, NP complete with example.\u00a0 \u00a0 (5)\n"
            ],
            "Asked": [
                "\nasked in 2075\n",
                "\nasked in 2073\n",
                "\nasked in 2068\n",
                "\nasked in 2076\n",
                "\nasked in 2075\n",
                "\nasked in 2069\n",
                "\nasked in 2070\n",
                "\nasked in 2073\n",
                "\nasked in 2067\n",
                "\nasked in 2076\n",
                "\nasked in 2074\n",
                "\nasked in 2072\n",
                "\nasked in 2071\n",
                "\nasked in 2070\n",
                "\nasked in 2069\n",
                "\nasked in 2068\n",
                "\nasked in 2067\n",
                "\nasked in 2071\n",
                "\nasked in 2072\n",
                "\nasked in 2069\n",
                "\nasked in 2074\n",
                "\nasked in 2068\n",
                "\nasked in 2076\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2076 (new)\n"
            ]
        }
    ]
}