{
    "subject": "Theory of Computation",
    "questions": [
        {
            "Chapter": "\n                                Unit: 1 Basic Foundations\n                            ",
            "Question": [
                "1.\u00a0\u00a0Define the term: Kleene closure, union,\r\nconcatenation and power of an alphabet with\nexample.\n",
                "2.\u00a0 Define the term: alphabet, substring/Prefix/Suffix of a string with example.\n",
                "4. Define the term alphabet, prefix and suffix of string, concatenation and Kleen closure with example.\n"
            ],
            "Asked": [
                "\nasked in 2072\n",
                "\nasked in 2076\n",
                "\nasked in 2078\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 2 Introduction to Finite Automata\n                            ",
            "Question": [
                "1. Define finite Automata with\u00a0\u025b moves.Is\u00a0\u025b NFA has more computation power than DFA?\n",
                "1. Give the formal definition of DFA and NFA. How NFA can be converted into eqivalent DFA? Explain with suitable example.\n",
                "1.\u00a0 Define DFA and explain how it differs from NFA.\n",
                "1.\u00a0\u00a0What is DFA? How it differ with a NFA? Explain.\n",
                "1.\u00a0\u00a0Define finite automata. Give the formal\r\ndefinition of deterministic finite automata with example.\n",
                "1.\u00a0\u00a0Explain the extended transition function of NFA.\n",
                "1. Convert the following NFA-\u03b5 into equivalent NFA without\u00a0\u03b5.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "1.\u00a0\u00a0What do you mean by finite automata?\u00a0\u00a0Explain deterministic finite automata with\u00a0example.\n",
                "1.\u00a0 How can you represent a finite Automata? Explain.\n",
                "1.\u00a0\u00a0Differentiate between deterministic and\r\nnon-deterministic finite automata.\n",
                "1.\u00a0 What is finite automata? Define DFA\u00a0 with suitable example.\n",
                "2. GIve the DFA accepting the string over {a, b} such that eac\ufeffh string doesn't start with ab.\n",
                "2.\u00a0\u00a0Construct a DFA that accepts only the\r\nstrings ab, abb and baa not more\r\nfrom {a, b}*.\n",
                "2.\u00a0\u00a0Construct a DFA that\r\naccepts all the strings of alphabet {a, b} having each strings with even number\r\nof 0\u2019s and even number of 1\u2019s.\n",
                "2.\u00a0 Construct a DFA that accepts the strings over alphabet {0,1} with odd number of 0's and even number of 1's.\n",
                "2.\u00a0 Differentiate DFA with NFA. Design an NFA\u00a0 accepting strings over {0, 1} that end in 01.\n",
                "2.\u00a0\u00a0Explain the finite automata with Epsilon Transition.\n",
                "2.\u00a0\u00a0Give the DFA for language of strings over{a,b} where\r\nno two consecutive a\u2019s occurred.\n",
                "2.\u00a0\u00a0Give the DFA for language of strings over {0,\r\n1}\u00a0in which each strings end with 11.\n",
                "3.\u00a0 Give formal notation for an\u00a0\u03b5-NFA with example.\n",
                "3.\u00a0 Define the\u00a0\u03b5-closure of a state of\u00a0\u03b5-NFA with an example.\n",
                "3.\u00a0 What do you mean by\u00a0\u03b5-closure of a state in NFA with epsilon moves. Explain with an example.\n",
                "3.\u00a0\u00a0How\r\ncan you convert an \u025b-NFA into equivalent DFA? Explain.\n",
                "4.\u00a0 Give the formal definition of DFA. Construct a DFA accepting all strings of {0, 1} with even number of 0's and even number of 1's.\u00a0 \u00a0 (2+3)\n",
                "8.\u00a0\u00a0Compare\r\nFA, NFA and NFA-\u00a0\u03b5\u00a0with illustration.\n",
                "9.\u00a0 How a\u00a0\u03b5-NFA can be\u00a0converted\u00a0into NFA and\u00a0DFA?\u00a0Explain with a suitable example.\n",
                "9.\u00a0\u00a0Define finite automata and draw FA for the strings.\n",
                "9.\u00a0 Construct a NFA accepting language of {0, 1} with each string ending with 01 and convert it into equivalent DFA.\u00a0 \u00a0 (2+3)\n",
                "9.\u00a0 Explain about sub-set construction method to convert a NFA into equivalent DFA with suitable example.\n",
                "9.\u00a0\u00a0What is finite automata? Describe its\r\ndifferent variations with suitable examples.\n",
                "9.\u00a0\u00a0Show that a language L is accepted by\r\nsome DFA if and only if L is accepted by some\nNFA.\n",
                "9.\u00a0 Describe the extended transition function of a NFA. Construct a NFA accepting the language over {a, b}* with each strings containing three consecutive b's. Show by extended function that it accepts abbb.\n",
                "9.\u00a0\u00a0Design a constructive method to prove\r\nthat the complement of the language accepted by an NFA is accepted by a DFA.\n",
                "9.\u00a0 Convert the following NFA into equivalent DFA.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n",
                "10.\u00a0\u00a0Prove that for any given NFA N accepting a language L there exists\na DFA D such that L(N) = L(D).\u00a0\n",
                "10.\u00a0\u00a0Describe the method of subset construction to convert a given NFA into\r\nequivalent DFA with suitable example.\n",
                "10.\u00a0\u00a0How a NFA can be converted\r\ninto a DFA? Convert the following NFA into equivalent DFA.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "10.\u00a0 Convert the following NFA into equivalent DFA using subset construction and also show the transition diagram for this DFA.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "11.\u00a0\u00a0Show that a\r\nlanguage L is accepted by some DFA if\r\nand only if L is accepted by s.\n",
                "11.\u00a0\u00a0Define the non-deterministic finite automata (NFA) and\r\nwrite down recursive definition of for NFA.\n"
            ],
            "Asked": [
                "\nasked in 2067\n",
                "\nasked in 2078\n",
                "\nasked in 2076\n",
                "\nasked in 2067-II\n",
                "\nasked in 2068\n",
                "\nasked in 2071\n",
                "\nasked in 2074\n",
                "\nasked in 2069\n",
                "\nasked in 2075\n",
                "\nasked in 2070\n",
                "\nasked in 2073\n",
                "\nasked in 2067\n",
                "\nasked in 2072\n",
                "\n\n                                        show solution\n                                    \nasked in 2071\n",
                "\nasked in 2075\n",
                "\nasked in 2073\n",
                "\nasked in 2069\n",
                "\nasked in 2068\n",
                "\nasked in 2067-II\n",
                "\nasked in 2073\n",
                "\nasked in 2075\n",
                "\nasked in 2076\n",
                "\nasked in 2071\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2070\n",
                "\nasked in 2067\n",
                "\nasked in 2070\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2076\n",
                "\nasked in 2072\n",
                "\nasked in 2067-II\n",
                "\nasked in 2074\n",
                "\nasked in 2069\n",
                "\nasked in 2073\n",
                "\nasked in 2071\n",
                "\nasked in 2072\n",
                "\nasked in 2068\n",
                "\nasked in 2075\n",
                "\nasked in 2067\n",
                "\nasked in 2069\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 3 Regular Expressions\n                            ",
            "Question": [
                "1.\u00a0 Define the NFA with\u00a0\u03b5-transition and\u00a0\u03b5-closure of a state. Show that for every regular expression r, representing a language L, there is\u00a0\u03b5-NFA accepting the same language. Also convert regular expression (a+b)*ab* into equivalent Finite Automata.\u00a0 \u00a0 (2+6+2)\n",
                "2. Find the minimum state DFA for the given DFA below.\n",
                "2.\u00a0\u00a0What do you mean by pumping lemma for regular languages?\n",
                "2. Find the regular expression describing following languages over alphabet {0, 1}*.\u00a0 \u00a0 \u00a0 \u00a0 a) The language all strings containing at least two 0's.\u00a0 \u00a0 \u00a0 \u00a0 b) The language of all strings containing both 00 and 010 as substring.\n",
                "3.\u00a0\u00a0Give the regular expression\r\nfor the following languages.\u00a0 \u00a0 \u00a0 \u00a0 a. L={SS\u00a0\u2208 {a, b}* and S starts with aa or b and does not contains substring bb.\u00a0 \u00a0 \u00a0 \u00a0 b. L={S|S\u00a0\u2208 {0, 1}* and 0 occurs in pairs if any and ends with 1.\n",
                "3.\u00a0\u00a0For a regular\r\nexpression (a+b)*baa, construct \u03b5-NFA.\n",
                "3.\u00a0\u00a0Show that language of palindrome over {a,b} is not a\r\nregular language.\n",
                "3.\u00a0 Construct FA recognizing the languages described by following regular expressions.\u00a0 \u00a0 \u00a0 \u00a0 a)\u00a0 \u00a0 (10*+01*)11*\u00a0 \u00a0 \u00a0 \u00a0 b)\u00a0 \u00a0 (0+1)*(01+1000)0*\n",
                "3.\u00a0\u00a0Find the\r\nregular expression corresponding to the following languages over {0, 1}*.\na)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The language of all strings containing exactly two 0's.\nb)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The language of all strings containing 00 or\r\n101\r\nas substrings.\n",
                "4.\u00a0 Give the regular expression for the following languages over alphabet {a, b}\u00a0 \u00a0 \u00a0 \u00a0 a. Set of all strings ending with substring ab.\u00a0 \u00a0 \u00a0 \u00a0 b. Set of all strings with 2nd and 4th symbol is b.\n",
                "4.\u00a0\u00a0What are the regular operators applied to the regular\r\nlanguages? Explain with example.\n",
                "4.\u00a0 Write regular expression for the following regular languages.\u00a0 \u00a0 \u00a0 \u00a0 a) The set of strings over a alphabet {a, b} containing at least one 'a' and at least one 'b'.\u00a0 \u00a0 \u00a0 \u00a0 b) The set of strings over {0, 1} whose 5th symbol from right end is 1.\n",
                "4.\u00a0\u00a0Construct the FA recognizing the\r\nlanguage corresponding to the following regular expressions.\na)\r\n(11 + 10)*01\nb)\r\n(111 + 100)*10\n",
                "4.\u00a0 Write regular expression for the set of strings of 0's and 1's with at most one pair of consecutive 1's.\n",
                "4.\u00a0\u00a0Define Turing Machines.\u00a0\u00a0Draw NFA -\u00a0\u03b5\u00a0corresponding to following regular\nexpression over\u00a0\u00a0\u2211 = {0,1}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0010* + 0(01+10)* 11\n",
                "5.\u00a0\u00a0State the pumping lemma for regular language. Show by example, how can\r\nyou use it to prove that a language is not regular.\n",
                "5.\u00a0\u00a0Simplify the following regular\r\nexpressions.\na.)\r\n1*+1*0(\u025b+0+1)*\u00f8\nb.)\r\n\u025b+0+1+( \u025b+0+1)( \u025b+0+1)*( \u025b+0+1)\n",
                "5. Give the regular expressions for the following language over alphabet{a,b}, \u00a0\u00a0\u00a0\u00a0a. Set of all strings with substring bab ar abb\u00a0\u00a0\u00a0\u00a0b. Set of all strings whose 3rd symbol is 'a' and 5th symbol is 'b'\n",
                "6. Show that L = {an | n is a prime number} is not a regular language.\n",
                "6.\u00a0 Give the regular expressions for following language over alphabet {0, 1}.\u00a0 \u00a0 (2.5+2.5)\u00a0 \u00a0 \u00a0 \u00a0 a. Set of all strings with 2nd symbol from right is 1.\u00a0 \u00a0 \u00a0 \u00a0 b. Set of all strings starting with 00 or 11 and ending with 10 or 01.\n",
                "7.\u00a0 Show that language L={0m1m | m>=1} is not a regular language.\n",
                "9.\u00a0\u00a0What\r\nare the algebraic rules for regular expressions? Also show that if L, M, N are\r\nany regular language then show that L(M U N) = L.M U L.N.\n",
                "9.\u00a0 Convert the following regular expression into\u00a0\u03b5-NFA.\u00a0 \u00a0 \u00a0 \u00a0 a) 01*\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b) (0+1)01*\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c) 00+(0+1)*100*\n",
                "10.\u00a0\u00a0What do you mean by regular\r\nexpressions? Explain with example of pumping lemma for regular\u00a0 languages.\n",
                "9.\u00a0\u00a0Show that for any regular expression,\r\nthere is a NFA that accepts the same language represented by r. Convert the\r\nregular expression (a+b) (aa+ba)* + ab(a+b)* bba into NFA.\n",
                "10.\u00a0 How do you convert a regular expression to automata? Convert the regular expression (0+1)*1(0+1) to auatomata.\n",
                "10.\u00a0 State and prove the pumping lemma for regular language. Explain about its application.\n",
                "10.\u00a0\u00a0For the following regular expression draw an\u00a0\u03b5-\u00a0NFA \u00a0recognizing the corresponding languages.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i. (00 +1)*(10)*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ii. 001*0*11\n",
                "10.\u00a0\u00a0State and prove pumping lemma for\r\nregular language. Show by example how it can be used to prove a language is not\r\na regular.\n",
                "10.\u00a0Find the\r\nminimum state DFA equivalent to the\r\nfollowing\u00a0\u00a0DFA.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "11.\u00a0 Convert the following DFA into minimum-state equivalent DFA.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "11.\u00a0 Explain about the closure properties of regular languages. Show that for any regular languages L1 and L2, L1\u222aL2 is also regualr.\n",
                "12.\u00a0 What is a regular grammar? Explain with example, about the method of converting a regular grammar into equivalent Finite Automata.\n",
                "13.\u00a0\u00a0Prove that any regular language can be accepted by a\r\nfinite automata with all details.\n"
            ],
            "Asked": [
                "\nasked in 2076 (new)\n",
                "\nasked in 2078\n",
                "\nasked in 2070\n",
                "\nasked in 2074\n",
                "\nasked in 2067\n",
                "\nasked in 2067-II\n",
                "\nasked in 2068\n",
                "\nasked in 2074\n",
                "\nasked in 2072\n",
                "\nasked in 2076\n",
                "\nasked in 2071\n",
                "\nasked in 2075\n",
                "\nasked in 2072\n",
                "\nasked in 2073\n",
                "\nasked in 2070\n",
                "\nasked in 2072\n",
                "\nasked in 2071\n",
                "\nasked in 2078\n",
                "\nasked in 2078\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2071\n",
                "\nasked in 2075\n",
                "\nasked in 2069\n",
                "\nasked in 2068\n",
                "\nasked in 2073\n",
                "\nasked in 2076\n",
                "\nasked in 2070\n",
                "\nasked in 2067-II\n",
                "\nasked in 2067\n",
                "\nasked in 2073\n",
                "\nasked in 2076\n",
                "\nasked in 2076\n",
                "\nasked in 2070\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 4 Context Free Grammar\n                            ",
            "Question": [
                "3.\u00a0\u00a0Explain the closure properties of context free\r\nlanguages with example.\n",
                "4.\u00a0\u00a0Define the term parse tree, regular grammar,\r\nsequential form and ambiguous grammar.\n",
                "4.\u00a0 Convert following regular grammar into Finite Automata.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "4.\u00a0\u00a0What do you mean by a CNF grammar? Convert following\r\ngrammar in CNF.\nS\r\n\u2192 AC|\u025b, A \u2192 aS|a, C \u2192 BC|aC|b.\n",
                "4.\u00a0 What do you mean by a CFG in CNF? What are the criteria to be a CFG in CNF? Explain.\n",
                "5.\u00a0 What do you mean by a CNF grammar? Convert following grammar into CNF.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 S\u2192 ABa,\u00a0 \u00a0 A\u2192 aab,\u00a0 \u00a0 B\u2192 AC\n",
                "5.\u00a0 What is CFG? Design CFG for palindromes with alphabets {0, 1}.\n",
                "5.\u00a0 Given the following grammar\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 Remove the immediate left recursion from the grammar.\n",
                "5.\u00a0 Define the term Regular Grammar. What is the relation of Regular Grammar with other grammars? Explain.\n",
                "5.\u00a0 Define Chomsky Normal Form and Greibach Normal Form in reference to CFG. Give a suitable example of each.\u00a0 \u00a0 (2.5+2.5)\n",
                "6.\u00a0\u00a0what do you mean by a CNF\r\ngrammar? Convert the following grammar into CNF. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S\u2192abSb | aa\n",
                "7.\u00a0\u00a0what are unrestricted grammar? How they differ\r\nwith CFG? Explain.\n",
                "8.\u00a0\u00a0Explain about the Unrestricted Grammar.\n",
                "7. Explain about the Chomsky's Hierarchy about the language and grammars.\n",
                "9. Convert the following grammar into Chomsky Normal Form.\u00a0 \u00a0 \u00a0 \u00a0 S\u00a0\u2192 abSb | a | aAb\u00a0 \u00a0 \u00a0 \u00a0 A\u00a0\u2192 bS | aAAb |\u00a0\u03b5\n",
                "10.\u00a0 Define the term immediate left recursion. How can you convert a grammar with immediate left recursion into equivalent grammar without left recursion? Remove left recursion from the following grammar.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n",
                "11.\u00a0 Convert the following grammar into Chomsky Normal Form.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 S\u2192 ASB|\u03b5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 A\u00a0\u2192aAS|bAS|a\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 B\u2192SbS|A|CS|bb\n",
                "11.\u00a0\u00a0Define CFG. Prove the following CFG is ambiguous.\nS\u2192S+S\r\n| S*S | (S) | a\nWrite\r\nthe unambiguous CFG for the above grammar.\n",
                "11.\u00a0\u00a0Define regular\ngrammar. Show with suitable example\nthat the language\ndescribed by regular grammar are accepted by a finite\r\nautomata.\n",
                "11.\u00a0\u00a0Define CFG. Convert the following CFG into Chomsky\r\nNormal Form.\nS \u2192\r\n|Sbb|aabb|Aa|Bb,\nA\r\n\u2192 Aa|a,\nB \u2192 Bb|b|\u025b\n",
                "11.\u00a0\u00a0Define Context Free\r\nGrammar. Given the following CFG.\nS \u21920AS | 0, A \u2192 SIA| SS | 10\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0For the string 001001100, Give the left most and right\r\nmost derivation and also construct a parse tree\n",
                "12.\u00a0 Convert the following CFG into CNF.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n",
                "12.\u00a0\u00a0What do you mean by the Chomsky\nHierarchy in the formal language\ntheory? Explain in detail.\u00a0\n",
                "12.\u00a0\u00a0Given the following grammar,\nS \u2192 AAC |\nA \u2192 aAb | ab | \u025bC\r\n\u2192 aC | a | \u025b\nSimplify the grammar and convert it\r\ninto equivalent grammar in CNF.\n",
                "13.\u00a0\u00a0Give a detailed description of ambiguity in\r\ncontext free grammar.\n",
                "14.\u00a0\u00a0Explain about the Chomsky Hierarchy of the language.\n"
            ],
            "Asked": [
                "\nasked in 2069\n",
                "\nasked in 2067-II\n",
                "\nasked in 2067\n",
                "\nasked in 2068\n",
                "\nasked in 2074\n",
                "\nasked in 2076\n",
                "\nasked in 2073\n",
                "\nasked in 2075\n",
                "\nasked in 2074\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2071\n",
                "\nasked in 2071\n",
                "\nasked in 2067-II\n",
                "\nasked in 2078\n",
                "\nasked in 2078\n",
                "\nasked in 2074\n",
                "\nasked in 2075\n",
                "\nasked in 2070\n",
                "\nasked in 2071\n",
                "\nasked in 2068\n",
                "\nasked in 2067-II\n",
                "\nasked in 2073\n",
                "\nasked in 2071\n",
                "\nasked in 2072\n",
                "\nasked in 2069\n",
                "\nasked in 2067-II\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 5 Push Down Automata\n                            ",
            "Question": [
                "2.\u00a0 How can you define the language accepted by a PDA? Explain how a PDA accepting language by empty stack is converted into an equivalent PDA accepting by final state and vice-versa.\u00a0 \u00a0 (2+4+4)\n",
                "3.\u00a0\u00a0Explain the non-deterministic PDA with example.\n",
                "4.\u00a0\u00a0Differentiate between deterministic and\r\nnon-deterministic PDA.\n",
                "5. Convert following grammar into equivalent PDA\u00a0 \u00a0 \u00a0 \u00a0\u00a0\n",
                "5.\u00a0\u00a0Give the formal\r\ndefinition of NPDA. How it differs with DPDA?\nExplain.\n",
                "5.\u00a0\u00a0Define Deterministic Push\r\nDown Automata. How it differs with a Finite\nAutomata.\n",
                "6.\u00a0 Construct a PDA accepting L={w | w has equal no. of a's and b's}.\n",
                "6.\u00a0 What is PDA? How is it different from finite automata?\n",
                "6.\u00a0\u00a0Explain the method to convert a given\r\nCFG into equivalent PDA.\n",
                "6.\u00a0 How can you convert a CFG into equivalent PDA? Explain with example.\n",
                "8. Define a Push Down Automata. Construct a PDA that accept L = {anbn | n>=0}.\n",
                "10.\u00a0 Construct a PDA accepting language over {0, 1} representing strings with equal no of 0s and1s. Show by sequence of IDs that 0101 is accepted by this PDA.\u00a0 \u00a0 (3+2)\n",
                "11.\u00a0 Construct a PDA that accepts the strings of language L={ wwR | w is in {a, b}*}.\n",
                "11.\u00a0\u00a0Give the formal definition of Push Down Automata.\r\nConstruct a PDA accepting the language\nL =\u00a0{0n1n | n >\u00a00}\n",
                "12.\u00a0 Construct a Push Down Automata that accepts all the strings from alphabet {0, 1} with equal number of 0 and 1. Show that 0110 is accepted by this PDA and 01101 is not.\n",
                "12.\u00a0\u00a0Define the language of PDA that\r\naccepts by Final state. Explain, how a PDA accepting by empty stack can be converted into a PDA final state.\n",
                "12.\u00a0\u00a0Define deterministic PDA. Design a PDA\r\nthat accept a language L = {anbn | n>0}.\r\nYou may accept either by empty stack or by final state.\n",
                "12.\u00a0\u00a0Define the language of PDA that accepts by Final State. Explain how a PDA accepting empty stack can be converted\ninto a PDA by final state.\n",
                "13.\u00a0\u00a0Construct a PDA that accepts a language of\r\npalindrome of even length from an alphabet {a,b}.\n",
                "13.\u00a0 Discuss the equivalent of PDA and CFG. Convert the grammar\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0S\u2192\ufeffaAA\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0A\u2192\ufeffaS|bS|a\u00a0 \u00a0 \u00a0 \u00a0 to a PDA that accepts the same language by empty stack.\n",
                "13.\u00a0 Define PDA. Explain how a PDA accepting by empty stack is converted into equivalent PDA accepting same language by final state.\n"
            ],
            "Asked": [
                "\nasked in 2076 (new)\n",
                "\nasked in 2070\n",
                "\nasked in 2069\n",
                "\nasked in 2067\n",
                "\nasked in 2067-II\n",
                "\nasked in 2068\n",
                "\nasked in 2076\n",
                "\nasked in 2073\n",
                "\nasked in 2072\n",
                "\nasked in 2075\n",
                "\nasked in 2078\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2074\n",
                "\nasked in 2072\n",
                "\nasked in 2075\n",
                "\nasked in 2068\n",
                "\nasked in 2067-II\n",
                "\nasked in 2067\n",
                "\nasked in 2071\n",
                "\nasked in 2073\n",
                "\nasked in 2076\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 6 Turing Machines\n                            ",
            "Question": [
                "3. Construct a Turing Machine that accepts the language of odd length strings over alphabet {a, b}. Give the complete encoding for this TM as well as its input string w = abb in binary alphabet that is recoginzed by Universal Turing Machine.\n",
                "3.\u00a0 Define a Turing machine. Construct a TM that accept L = {wcwR | w\u2208(0, 1) and c is\u00a0\u03b5 or 0 or 1. Show that string 0110 is accepted by this TM with sequence of Instantaneous Description (ID).\u00a0 \u00a0 (2+6+2)\n",
                "5.\u00a0\u00a0Explain about recursive enumerable and recursive language.\n",
                "5.\u00a0\u00a0Explain the non-deterministic Turing machines with example.\n",
                "6.\u00a0\u00a0What is a multi track\r\nTuring Machine? How it differs with single track machine?\n",
                "6.\u00a0\u00a0Construct a Turning Machine that\r\naccepts a language of strings over (a, b) with each string of even length. Show\r\nhow it accepts string abab.\n",
                "6.\u00a0\u00a0Give formal definition of Turing Machine. Explain the\r\nroles of Turing Machine.\n",
                "6.\u00a0 Define the universal Turing machine and describe its role.\n",
                "6.\u00a0\u00a0Define the Turing machine. What are the roles of\r\nTuring machines?\n",
                "7.\u00a0\u00a0Construct a Turing Machine that\r\naccepts the language of palindrome over {a,\r\nb}* with each string of odd length.\n",
                "7.\u00a0 Design a Turing machine that accepts the language {0n1n|n\u22651} over {0, 1}.\n",
                "7.\u00a0 What is a Turing Machine? Give formal definition. How it differ from FA?\n",
                "7.\u00a0\u00a0What is a universal Turing machine?\n",
                "7.\u00a0\u00a0Construct a Turing machine that\r\naccepts the language of palindrome over {a,b}* with each strings of even length.\n",
                "7.\u00a0 Describe the Turing machine. Construct a TM that accepts even length strings from alphabet {0, 1}.\n",
                "7.\u00a0\u00a0Give the formal\r\ndefinition of Turning Machine. How it differs from PDA?\n",
                "8.\u00a0 Explain, how can you encode a Turing machine into universal language.\n",
                "8.\u00a0\u00a0What is the role of a Turing machine? Explain.\n",
                "8.\u00a0 What is recursive language? Explain.\n",
                "8.\u00a0\u00a0What is an algorithm?\r\nExplain on the basis of Church\nHypothesis.\n",
                "8.\u00a0\u00a0What is universal language? Explain.\n",
                "8.\u00a0 Describe the Turing machines with multiple tape, multiple track and storage in state.\u00a0 \u00a0 (5)\n",
                "10. Define Turing Machine and explain its different variations.\n",
                "11. What do you mean by computational Complexity? Explain about the time and space complexity of a Turing machine.\n",
                "11.\u00a0 Define complexity of a Turing machine. Explain about big Oh, big Omega and big Theta notation used for complexity measurement.\u00a0 \u00a0 (1+4)\n",
                "12.\u00a0\u00a0Draw Turing machine to accept palindromes over {a, b}.\n",
                "12.\u00a0 Describe multi tape Turing machine. Show that multi-tape Turing machine and one tape Turing machines are equivalent.\n",
                "12.\u00a0\u00a0Draw Turing Machine\n(TM) to accept\u00a0\u00a0palindromes over\n{a, b}. (Even\nas well as odd Palindromes).\n",
                "13.\u00a0 Define Turing Machine. Construct the Turing machine that accepts the languages\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 L={anbn | n>=0}\n",
                "13.\u00a0\u00a0Explain about multi tape TM. Show that every language accepted by a\r\nmulti-tape Turning Machine is also accepted by one tape Turning Machine.\n",
                "13.\u00a0\u00a0Describe a Universal Turing Machine\r\nand its operations. What types of languages are accepted by Universal TM?\n",
                "13.\u00a0\u00a0Explain about multi tape TM. Show\r\nthat every language accepted by a multi-tape Turing Machine is also accepted by\r\none tape Turing Machine.\n",
                "13.\u00a0 How can you show that the one tape Turing machine and multi-tape Turing machine are equivalent? Explain in detail.\n",
                "14.\u00a0 What is Universal Turing machine? Explain about the working mechanism of Universal Turing machine for processing the binary code input for (T, w) where T is specific Turing machine and w is input to T.\n",
                "14.\u00a0\u00a0Show that a Turing\nMachine with one tape and a Turing\nMachine with multiple\ntape are\u00a0equivalent.\n",
                "14.\u00a0 Explain the term Turing acceptable and Turing decidable. Show that if L is recursive language then complement of L is also recursive.\n"
            ],
            "Asked": [
                "\nasked in 2078\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2070\n",
                "\nasked in 2069\n",
                "\nasked in 2067\n",
                "\nasked in 2067-II\n",
                "\nasked in 2068\n",
                "\nasked in 2074\n",
                "\nasked in 2069\n",
                "\nasked in 2067\n",
                "\nasked in 2073\n",
                "\nasked in 2075\n",
                "\nasked in 2069\n",
                "\nasked in 2068\n",
                "\nasked in 2076\n",
                "\nasked in 2067-II\n",
                "\nasked in 2074\n",
                "\nasked in 2072\n",
                "\nasked in 2073\n",
                "\nasked in 2067\n",
                "\nasked in 2068\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2078\n",
                "\nasked in 2078\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2069\n",
                "\nasked in 2074\n",
                "\nasked in 2070\n",
                "\nasked in 2072\n",
                "\nasked in 2067\n",
                "\nasked in 2067-II\n",
                "\nasked in 2068\n",
                "\nasked in 2075\n",
                "\nasked in 2076\n",
                "\nasked in 2071\n",
                "\nasked in 2075\n"
            ]
        },
        {
            "Chapter": "\n                                Unit: 7 Undecidability and Intractability\n                            ",
            "Question": [
                "6.\u00a0\u00a0Explain the computational complexity with example.\n",
                "7.\u00a0\u00a0Differentiate between class P and class NP.\n",
                "7.\u00a0\u00a0What do you mean by problem reduction?\r\nAlso explain about NP-Completeness.\n",
                "7.\u00a0 Show that the complement of a recursive language is recursive.\n",
                "8.\u00a0\u00a0Differentiate between class P and class NP.\n",
                "8.\u00a0 What do you mean by Intractability? Explain in brief.\n",
                "8.\u00a0\u00a0Define the term Class P and Class NP with\r\nexample.\n",
                "8.\u00a0 What do you mean by tractable and intractable problems? Is intractable problems are solvable by Turing machine?\n",
                "12. Explain the term Intractability. Is SAT problem is intractable? Justify.\n",
                "12.\u00a0 What do you mean by tractable and Intractable problems?Explain with reference to TM.\u00a0 \u00a0 (5)\n",
                "13.\u00a0 Define class P and NP with example. Show that: If P1 is NP complete and there is a polynomial time reduction of p1 to P2 then P2 is NP-complete.\n",
                "14.\u00a0 Write short notes on (Any two):\u00a0 \u00a0 \u00a0 \u00a0 a) Solvable vs Unsolvable problems\u00a0 \u00a0 \u00a0 \u00a0 b) CNF Satisfiability\u00a0 \u00a0 \u00a0 \u00a0 c) Recursive and Recursively Enumerable Languages\n",
                "14.\u00a0 Write short notes on:\u00a0 \u00a0 \u00a0 \u00a0 a) Turing maching\u00a0 \u00a0 \u00a0 \u00a0 b) Classes P and NP\n",
                "14.\u00a0\u00a0Explain the following:\na)\u00a0\u00a0\u00a0\u00a0\u00a0\r\nRegular Grammar\nb)\u00a0\u00a0\u00a0\u00a0\u00a0\r\nHalting problem\nc)\u00a0\u00a0\u00a0\u00a0\u00a0\r\nChomsky hierarchy\nd)\u00a0\u00a0\u00a0\u00a0\u00a0\r\nNP-complete Problem\n",
                "14.\u00a0\u00a0Write short\r\nnotes on (Any two):\na)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unrestricted Grammar\nb)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Universal Turing Machine\nc)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 CNF-SAT problem Complexity\n",
                "14.\u00a0\u00a0Explain the following:\na)\u00a0\u00a0\u00a0\u00a0\u00a0\r\nMinimization of finite\r\nstate machine\nb)\u00a0\u00a0\u00a0\u00a0\u00a0\r\nPush down automata (PDA).\nc)\u00a0\u00a0\u00a0\u00a0\u00a0\r\nHalting problems\nd)\u00a0\u00a0\u00a0\u00a0\u00a0\r\nComputational complexity\n",
                "14.\u00a0\u00a0Explain the following terms.\n(a)\u00a0 Big Oh and Big Omega (b) Class P and NP\n(c)\u00a0 CNF SAT Problem\n(d)\nTuring Decidable and Acceptable problems.\n",
                "14.\u00a0\u00a0Write short notes on:\na.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\nDecidable Vs\r\nUn-decidable problems.\nb.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\nUnrestricted Grammar\nc.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\nNP-completeness\nd.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\nCNF-SAT Problem.\n"
            ],
            "Asked": [
                "\nasked in 2070\n",
                "\nasked in 2070\n",
                "\nasked in 2072\n",
                "\nasked in 2074\n",
                "\nasked in 2069\n",
                "\nasked in 2076\n",
                "\nasked in 2071\n",
                "\nasked in 2075\n",
                "\nasked in 2078\n",
                "\nasked in 2076 (new)\n",
                "\nasked in 2074\n",
                "\nasked in 2074\n",
                "\nasked in 2073\n",
                "\nasked in 2070\n",
                "\nasked in 2072\n",
                "\nasked in 2069\n",
                "\nasked in 2068\n",
                "\nasked in 2067\n"
            ]
        }
    ]
}